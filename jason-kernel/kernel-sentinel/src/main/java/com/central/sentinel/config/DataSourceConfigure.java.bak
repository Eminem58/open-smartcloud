package com.central.sentinel.config;

import com.alibaba.csp.sentinel.datasource.ReadableDataSource;
import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;
import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.alibaba.sentinel.SentinelProperties;
import org.springframework.cloud.alibaba.sentinel.datasource.config.NacosDataSourceProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;
import org.springframework.cloud.alibaba.sentinel.datasource.config.NacosDataSourceProperties;
import org.springframework.cloud.alibaba.sentinel.datasource.config.DataSourcePropertiesConfiguration;
import org.springframework.cloud.alibaba.sentinel.datasource.RuleType;
import java.util.List;

/**
 * @program: open-smartcloud
 * @description:
 * @author: jason
 * @create: 2019-07-17 17:53
 **/
@Configuration
public class DataSourceConfigure {
        Logger logger = LoggerFactory.getLogger(DataSourceConfigure.class);

        @Autowired
        private SentinelProperties sentinelProperties;

        @Bean
        public DataSourceConfigure init() throws Exception {

            logger.info("[NacosSource初始化,从Nacos中获取熔断规则]");

            sentinelProperties.getDatasource().entrySet().stream().filter(map -> {
                return map.getValue().getNacos() != null;
            }).forEach(map -> {
                NacosDataSourceProperties nacos = map.getValue().getNacos();
                ReadableDataSource<String, List<FlowRule>> flowRuleDataSource = new NacosDataSource<>(nacos.getServerAddr(),
                        nacos.getGroupId(), nacos.getDataId(),
                        source -> JSON.parseObject(source, new TypeReference<List<FlowRule>>() {
                        }));
                FlowRuleManager.register2Property(flowRuleDataSource.getProperty());
            });
            return new DataSourceConfigure();
        }
}
