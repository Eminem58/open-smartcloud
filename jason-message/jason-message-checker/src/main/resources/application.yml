server:
  port: 10005
#  port: ${randomServerPort.value[8000,8005]}    #随机端口

jason:
  log:
    kafka: false
    trace: false
    level: error,info

logging:
  level:
    root: INFO

spring:
  application:
    name: message-checker
  http:
    encoding:
      charset: utf8
      force: true
      enabled: true
  datasource:
    dynamic:
      enable: true
    druid:
      # JDBC 配置(驱动类自动从url的mysql识别,数据源类型自动识别)
      core:
        url: jdbc:mysql://172.16.4.112:3306/open_oauth_center?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT
        username: root
        password: zyjs123ZYJS
        driver-class-name:  com.mysql.cj.jdbc.Driver
      log:
        url: jdbc:mysql://172.16.4.112:3306/open_log_center?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT
        username: root
        password: zyjs123ZYJS
        driver-class-name:  com.mysql.cj.jdbc.Driver
      #连接池配置(通常来说，只需要修改initialSize、minIdle、maxActive
      initial-size: 1
      max-active: 20
      min-idle: 1
      # 配置获取连接等待超时的时间
      max-wait: 60000
      #打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      validation-query: SELECT 'x'
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      filters: stat,wall
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      #是否启用StatFilter默认值true
      web-stat-filter.enabled: true
      web-stat-filter.url-pattern:  /*
      web-stat-filter.exclusions: "*.js , *.gif ,*.jpg ,*.png ,*.css ,*.ico , /druid/*"
      web-stat-filter.session-stat-max-count: 1000
      web-stat-filter.profile-enable: true
      # StatViewServlet配置
      #展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
      #是否启用StatViewServlet默认值true
      stat-view-servlet.enabled: true
      #根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html例如：
      #http://110.76.43.235:9000/druid/index.html
      #http://110.76.43.235:8080/mini-web/druid/index.html
      stat-view-servlet.url-pattern:  /druid/*
      #允许清空统计数据
      stat-view-servlet.reset-enable:  true
      stat-view-servlet.login-username: admin
      stat-view-servlet.login-password: admin
      #StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数
      #deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问
      #配置的格式
      #<IP>
      #或者<IP>/<SUB_NET_MASK_size>其中128.242.127.1/24
      #24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。
      #stat-view-servlet.allow=
      #stat-view-servlet.deny=128.242.127.1/24,128.242.128.1
      # Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
      #aop-patterns= # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      ################### mysq end ##########################
  redis:
  ################### redis 单机版 start ##########################
    host: 172.16.4.121
    port: 6379
    timeout: 3000
    database: 1
    jedis:
      pool:
        max-active: 20
  kafka:
    bootstrap-servers: 172.16.4.101:31090
    listener:
      type: BATCH
    producer:
      batchSize: 500
      keySerializer: org.apache.kafka.common.serialization.StringSerializer
      #valueSerializer: cn.stylefeng.roses.kernel.logger.serizlizer.FastjsonKafkaSerializer
    consumer:
      group-id: commonLogList
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      #valueDeserializer: cn.stylefeng.roses.biz.log.core.serilizer.FastjsonKafkaDeserializer
      auto-offset-reset: earliest
      maxPollRecords: 500
  zipkin:
    base-url: http://127.0.0.1:9006
################### redis 单机版 end ##########################
#    cluster:
#      nodes: 130.75.131.237:7000,130.75.131.238:7000,130.75.131.239:7000,130.75.131.237:7001,130.75.131.238:7001,130.75.131.239:7001
###        #130.75.131.237:7000,130.75.131.238:7000,130.75.131.239:7000,130.75.131.237:7001,130.75.131.238:7001,130.75.131.239:7001
##        #192.168.3.157:7000,192.168.3.158:7000,192.168.3.159:7000,192.168.3.157:7001,192.168.3.158:7001,192.168.3.159:7001
#    timeout: 1000 # 连接超时时间（毫秒）
#    pool:
#      max-active: 2000  # 连接池最大连接数（使用负值表示没有限制）,如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
#      max-idle: 500     # 连接池中的最大空闲连接 ，默认值也是8
#      min-idle: 50     # 连接池中的最小空闲连接 ，默认值也是0
#      max-wait: 1000   # # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException

mybatis-plus:
  #mapper-locations: classpath*:com/central/demo/order/dao/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.central.message.api.model
  #typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    # 数据库相关配置
    #db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      #id-type: id_worker
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      #field-strategy: not_empty
      #驼峰下划线转换
      #column-underline: true
      #数据库大写下划线转换
      #capital-mode: true
      #逻辑删除配置
      #logic-delete-value: 0
      #logic-not-delete-value: 1
      #db-type: h2
    #刷新mapper 调试神器
    refresh: true
  # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false

#设置最大超时时间
ribbon:
   ReadTimeout: 16000
   ConnectTimeout: 16000

#设置最大容错超时时间
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 16000

##feign参数优化
feign:
  hystrix:
    enabled: false
  client:
    config:
      default:
        connectTimeout: 300  #创建连接的超时时间 单位：毫秒
        readTimeout: 3000    #处理请求的超时时间 单位：毫秒
        #errorDecoder: cn.stylefeng.roses.core.feign.RosesFeignErrorDecoder
        #requestInterceptors:
        #- cn.stylefeng.roses.core.feign.RosesFeignHeaderProcessInterceptor
  compression:
    request:
      enabled: true
      mine-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

eureka:
    client:
        healthcheck:
            enabled: true
        instance-info-replication-interval-seconds: 10
        serviceUrl:
            defaultZone: http://127.0.0.1:9000/eureka
        #statusPageUrlPath: ${management.context-path}/info
        #healthCheckUrlPath: ${management.context-path}/health
    instance:
      prefer-ip-address: true
      instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
      lease-renewal-interval-in-seconds: 5  #每隔几秒告诉eureka服务器我还存活，用于心跳检测
      lease-expiration-duration-in-seconds: 10 #如果心跳检测一直没有发送，10秒后会从eureka服务器中将此服务剔除
      #注册实例文档
      status-page-url: http://${spring.cloud.client.ip-address}:${server.port}/swagger-ui.html